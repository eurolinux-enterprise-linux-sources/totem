%.plugin: %.plugin.in
	$(AM_V_GEN)$(INTLTOOL_MERGE) $(INTLTOOL_MERGE_OPTIONS) $(top_srcdir)/po $< $@ -d -u -c $(top_builddir)/po/.intltool-merge-cache

# Quieten the intltool-merge process
INTLTOOL_MERGE_OPTIONS = $(INTLTOOL_MERGE_OPTIONS_$(V))
INTLTOOL_MERGE_OPTIONS_ = $(INTLTOOL_MERGE_OPTIONS_$(AM_DEFAULT_VERBOSITY))
INTLTOOL_MERGE_OPTIONS_0 = -q

plugin_DATA = $(plugin_in_files:.plugin.in=.plugin)

CLEANFILES = $(plugin_DATA)
DISTCLEANFILES = $(plugin_DATA)
EXTRA_DIST = $(plugin_in_files)

AM_CPPFLAGS = \
	-DG_LOG_DOMAIN=\""Totem"\"	\
	$(DISABLE_DEPRECATED)		\
	-I$(top_srcdir)/		\
	-I$(top_srcdir)/src		\
	-I$(top_srcdir)/src/plugins	\
	-I$(top_srcdir)/src/gst

plugin_cflags =			\
	$(PLAYER_CFLAGS)	\
	$(WARN_CFLAGS)

plugin_ldflags = \
	-export-dynamic \
	-no-undefined \
	-avoid-version \
	-module

plugin_libadd = \
	$(top_builddir)/src/libtotem.la

# Disable some C warnings for Vala plugins which just create noise because the
# C code Vala generates is a little messy.
vala_plugin_cflags = \
	-Wno-unused-but-set-variable \
	-Wno-unused-variable \
	-Wno-unused-function \
	$(NULL)

# Checking rules for Python plugins
# Execute pylint on all the requisite files individually, returning non-zero
# iff any of the calls to pylint returned non-zero.
# Don't bother adding this as a prerequisite rule of 'check', since it can
# easily cause spurious and painful distcheck failures.
check-pylint: $(plugin_PYTHON)
if ENABLE_PYTHON
	@exitstatus=0; \
	for py in $^; do \
		$(PYLINT) -d C0111 -d W0511 -d F0401 $$py; \
		\
		newexitstatus=$$?; \
		if [ $$exitstatus == 0 ]; then \
			exitstatus=$$newexitstatus; \
		fi; \
	done; \
	exit $$exitstatus
endif

.PHONY: check-pylint
